% 50 % benign and 50% malignanat

%loading the data from text file
data = load('dataset.txt');

%reshaping the data
indexTwo=find(data(:,11)==2); 
indexFour=find(data(:,11)==4);
indexTwo=data(indexTwo,:);
indexFour=data(indexFour,:);
data=[indexTwo;indexFour];

%data for training 
trainingData2=data(1:105,2:10); 
trainingData4=data(460:565,2:10);
trainingData=[trainingData2;trainingData4];

%targets values of training data
targetValue2=data(1:105,11); 
targetValue4=data(460:565,11);
targetValues=[targetValue2;targetValue4];

%repalce the targets values with 0 and 1
targetValues(targetValues==2)=0;
targetValues(targetValues==4)=1;

%building the network
net = newff(trainingData',targetValues',20, {'tansig' 'tansig'}, 'trainr', 'learngd', 'mse');

%network parameters 
net.trainParam.goal = 0.01;
net.trainParam.lr=0.01;
view(net);
net = train(net, trainingData',targetValues');

%testing data
testData2=data(106:459,2:10);
testData4=data(566:699,2:10);
testData=[testData2;testData4];

%testing results generated by neural network
outputs = net(testData');
outputs=round(outputs);
outputs=outputs';

%finding out the percentage performance
actualOutputs2=data(106:459,11);
actualOutputs4=data(566:699,11);
actualOutputs=[actualOutputs2;actualOutputs4];
actualOutputs(actualOutputs==2)=0;
actualOutputs(actualOutputs==4)=1;
CorrectAnswer=outputs-actualOutputs;
countCorrectAnswer = length(find(CorrectAnswer==0));
performance=(countCorrectAnswer/size(outputs,1))*100;
    